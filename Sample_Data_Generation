import pandas as pd
import random
import string
from datetime import datetime, timedelta

NUM_TRAIN = 5000
NUM_TEST = 2000
START_DATE = datetime(2024, 1, 1)
USER_IDS = [f"user_{i}" for i in range(1, 101)]
ACTIONS = ["login", "logout", "read", "write", "delete", "update"]
RESOURCES = ["server1", "server2", "db1", "db2", "api1", "api2"]
STATUSES = ["test", "train"]

def random_ip():
    return ".".join(str(random.randint(0, 255)) for _ in range(4))

def random_timestamp(start, end):
    delta = end - start
    random_seconds = random.randint(0, int(delta.total_seconds()))
    return start + timedelta(seconds=random_seconds)

def generate_logs(num_records, is_training=True):
    logs = []
    end_date = START_DATE + timedelta(days=90)

    for _ in range(num_records):
        timestamp = random_timestamp(START_DATE, end_date)
        user = random.choice(USER_IDS)
        action = random.choice(ACTIONS)
        resource = random.choice(RESOURCES)
        ip = random_ip()
        status = random.choice(STATUSES)

        
        if is_training:
            is_anomaly = 1 if random.random() < 0.02 else 0
            if is_anomaly:
                user = f"unknown_{random.randint(1000, 9999)}"
                ip = random_ip()
                status = "failure"
        else:
            is_anomaly = None 

        logs.append({
            "timestamp": timestamp,
            "user_id": user,
            "action": action,
            "resource": resource,
            "ip_address": ip,
            "status": status,
            "is_anomaly": is_anomaly
        })

    return pd.DataFrame(logs)


train_df = generate_logs(NUM_TRAIN, is_training=True)
test_df = generate_logs(NUM_TEST, is_training=False)


train_df.to_csv("train_audit_logs.csv", index=False)
test_df.to_csv("test_audit_logs.csv", index=False)

